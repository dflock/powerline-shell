#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This is needed for old machines that still have Python 2.5
from __future__ import with_statement

import argparse
import os
import sys

# The rest of these are required for terminal size detection under various OSs
import shlex
import struct
import platform
import subprocess
import re

# For compatibility with Python<=2.6
if "check_output" not in dir(subprocess):  # duck punch it in!
    def f(*popenargs, **kwargs):
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, it will be overridden.')
        process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
        output, dummy_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            raise subprocess.CalledProcessError(retcode, cmd)
        return output
    subprocess.check_output = f

def warn(msg):
    '''Emit a warning to the end user'''
    print('[powerline-shell] %s' % msg)
    sys.stdout.flush()


class Powerline:
    symbols = {
        'flat': {
            'separator': '',  # None
            'separator_thin': '|',
            'rseparator': '',
            'rseparator_thin': '|',
            'lock': 'RO',
            'network': 'SSH',
            'ahead': '>',
            'behind': '<',
            'stash': '$',
            'branch': '}',
            'charge': '+',
            'discharge': '-',
            'ellipses': '...',
        },
        'compatible': {
            'separator': u'\u25BA',
            'separator_thin': u'\u203A',
            'rseparator': u'\u25C0',
            'rseparator_thin': u'\u2039',
            'lock': 'RO',
            'network': 'SSH',
            'ahead': u'\u00BB',
            'behind': u'\u00AB',
            'stash': u'\u00A7',
            'branch': u'\u23AC',
            'charge': u'+',
            'discharge': '-',
            'ellipses': u'\u2026',
        },
        'patched': {
            'separator': u'\uE0B0',
            'separator_thin': u'\uE0B1',
            'rseparator': u'\uE0B2',
            'rseparator_thin': u'\uE0B3',
            'lock': u'\uE0A2',
            'network': u'\u21D4',
            'ahead': u'\u2191',
            'behind': u'\u2193',
            'stash': u'\u00A7',
            'branch': u'\uE0A0',
            'charge': u'\U0001F50C',     # Power plug symbol
            'discharge': u'\U0001F50B',  # Battery symbol
            'ellipses': u'\u2026',
        },
    }

    color_templates = {
        'bash': '\\[\\e%s\\]',
        'zsh': '%%{%s%%}',
        'bare': '%s',
    }

    def __init__(self, args, cwd):
        self.args = args
        self.cwd = cwd
        mode, shell = args.mode, args.shell
        self.color_template = self.color_templates[shell]
        self.reset = self.color_template % '[0m'
        self.lock = Powerline.symbols[mode]['lock']
        self.network = Powerline.symbols[mode]['network']
        self.separator = Powerline.symbols[mode]['separator']
        self.separator_thin = Powerline.symbols[mode]['separator_thin']
        self.rseparator = Powerline.symbols[mode]['rseparator']
        self.rseparator_thin = Powerline.symbols[mode]['rseparator_thin']
        self.ahead = Powerline.symbols[mode]['ahead']
        self.behind = Powerline.symbols[mode]['behind']
        self.stash = Powerline.symbols[mode]['stash']
        self.branch = Powerline.symbols[mode]['branch']
        self.charge = Powerline.symbols[mode]['charge']
        self.discharge = Powerline.symbols[mode]['discharge']
        self.ellipses = Powerline.symbols[mode]['ellipses']
        self.segments = []
        self.right_segments = []

    def color(self, prefix, code):
        return self.color_template % ('[%s;5;%sm' % (prefix, code))

    def fgcolor(self, code):
        return self.color('38', code)

    def bgcolor(self, code):
        return self.color('48', code)


    def append(self, content, fg, bg, separator=None, separator_fg=None):
        '''Append the string to the powerline'''
        self.segments.append((content,
                              fg,
                              bg,
                              separator or self.separator,
                              separator_fg or bg))

    def append_right(self, content, fg, bg, separator=None, separator_fg=None):
        '''Append the string to the powerline, from the right'''
        # Swap normal separator for right separator
        if separator == self.separator:
            sep = self.rseparator
        elif separator == self.separator_thin:
            sep = self.rseparator_thin
        else:
            sep = separator

        self.right_segments.append((content,
                                    fg,
                                    bg,
                                    sep or self.rseparator,
                                    separator_fg or bg))

    def draw(self):
        left = ''
        for i, _ in enumerate(self.segments):
            left += self.draw_segment(i)
        left += self.reset

        right = ''
        for i, _ in enumerate(self.right_segments):
            right += self.draw_right_segment(i)

        # right = _strip_escapes(right)
        # warn("|%s| => %s" % (right, len(right)))
        # right = "right"
        # left = "left >"

        width, _ = get_terminal_size()
        spacing = width - len(_strip_escapes(right))
        # warn(spacing)

        return ("\\[\\r\\]" + " "*spacing + right + "\\[\\r\\]" + left + self.reset).encode('utf8')

    def draw_segment(self, idx):
        segment = self.segments[idx]
        next_segment = self.segments[idx + 1] if idx < len(self.segments) - 1 else None

        return ''.join((
            self.fgcolor(segment[1]) if segment[1] else self.reset,
            self.bgcolor(segment[2]) if segment[2] else self.reset,
            segment[0],
            self.bgcolor(next_segment[2]) if (next_segment and next_segment[2]) else self.reset,
            self.fgcolor(segment[4]),
            segment[3]))

    def draw_right_segment(self, idx):
        segment = self.right_segments[idx]
        prev_segment = self.right_segments[idx - 1] if idx > 0 else None

        return ''.join((
            self.bgcolor(prev_segment[2]) if (prev_segment and prev_segment[2]) else self.reset,
            self.fgcolor(segment[4]),
            segment[3],
            self.fgcolor(segment[1]) if segment[1] else self.reset,
            self.bgcolor(segment[2]) if segment[2] else self.reset,
            segment[0]))


def _strip_escapes(prompt):
    cleaned = re.sub(r'\\\[.+?\\\]', '', prompt)
    # warn(cleaned)
    return cleaned


def get_terminal_size():
    """ getTerminalSize()
     - get width and height of console
     - works on linux,os x,windows,cygwin(windows)
     originally retrieved from:
     https://gist.github.com/jtriley/1108174
    """
    current_os = platform.system()
    tuple_xy = None
    if current_os == 'Windows':
        tuple_xy = _get_terminal_size_windows()
        if tuple_xy is None:
            tuple_xy = _get_terminal_size_tput()
            # needed for window's python in cygwin's xterm!
    if current_os in ['Linux', 'Darwin'] or current_os.startswith('CYGWIN'):
        tuple_xy = _get_terminal_size_linux()
    if tuple_xy is None:
        print("default")
        tuple_xy = (80, 25)      # default value
    return tuple_xy


def _get_terminal_size_windows():
    try:
        from ctypes import windll, create_string_buffer
        # stdin handle is -10
        # stdout handle is -11
        # stderr handle is -12
        h = windll.kernel32.GetStdHandle(-12)
        csbi = create_string_buffer(22)
        res = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)
        if res:
            (bufx, bufy, curx, cury, wattr,
             left, top, right, bottom,
             maxx, maxy) = struct.unpack("hhhhHhhhhhh", csbi.raw)
            sizex = right - left + 1
            sizey = bottom - top + 1
            return sizex, sizey
    except:
        pass


def _get_terminal_size_tput():
    # get terminal width
    # src: http://stackoverflow.com/questions/263890/how-do-i-find-the-width-height-of-a-terminal-window
    try:
        cols = int(subprocess.check_call(shlex.split('tput cols')))
        rows = int(subprocess.check_call(shlex.split('tput lines')))
        return (cols, rows)
    except:
        pass


def _get_terminal_size_linux():
    def ioctl_GWINSZ(fd):
        try:
            import fcntl
            import termios
            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
            return cr
        except:
            pass
    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass
    if not cr:
        try:
            cr = (os.environ['LINES'], os.environ['COLUMNS'])
        except:
            return None
    return int(cr[1]), int(cr[0])


def get_valid_cwd():
    """ We check if the current working directory is valid or not. Typically
        happens when you checkout a different branch on git that doesn't have
        this directory.
        We return the original cwd because the shell still considers that to be
        the working directory, so returning our guess will confuse people
    """
    try:
        cwd = os.getcwd()
    except:
        cwd = os.getenv('PWD')  # This is where the OS thinks we are
        parts = cwd.split(os.sep)
        up = cwd
        while parts and not os.path.exists(up):
            parts.pop()
            up = os.sep.join(parts)
        try:
            os.chdir(up)
        except:
            warn("Your current directory is invalid.")
            sys.exit(1)
        warn("Your current directory is invalid. Lowest valid directory: " + up)
    return cwd


if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument('--cwd-only', action='store_true',
                            help='Only show the current directory')
    arg_parser.add_argument('--cwd-max-depth', action='store', type=int,
                            default=5, help='Maximum number of directories to show in path')
    arg_parser.add_argument('--colorize-hostname', action='store_true',
                            help='Colorize the hostname based on a hash of itself.')
    arg_parser.add_argument('--mode', action='store', default='patched',
                            help='The characters used to make separators between segments',
                            choices=[s for s in Powerline.symbols])
    arg_parser.add_argument('--shell', action='store', default='bash',
                            help='Set this to your shell type', choices=['bash', 'zsh', 'bare'])
    arg_parser.add_argument('prev_error', nargs='?', type=int, default=0,
                            help='Error code returned by the last command')
    args = arg_parser.parse_args()

    powerline = Powerline(args, get_valid_cwd())
